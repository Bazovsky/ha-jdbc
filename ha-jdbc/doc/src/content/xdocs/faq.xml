<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE faqs PUBLIC "-//APACHE//DTD FAQ V2.0//EN" "http://xml.apache.org/forrest/dtd/faq-v20.dtd">
<faqs>
	<title>Frequently Asked Questions</title>
	<faqsection>
		<title>Configuring HA-JDBC</title>
		<faq>
			<question>What does the "distributable" feature do? and when would I need it?</question>
			<answer>
				By indicated the "distributable" option, you are declaring that your database cluster(s) will be accessed by multiple JVMs (e.g. cluster of application servers).
				HA-JDBC uses reliable multicast communication provided by JGroups to broadcast database activations and deactivations to each JVM.
				If your database cluster is accessed by more than one JVM and the "distributable" option is not specified, you run the risk of databases falling out of sync when a database is re-activated.
			</answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>Using HA-JDBC</title>
		<faq>
			<question>When using the "distributable" feature, I get a <code>ChannelException</code>: "unable to set up the protocol stack".</question>
			<answer>
				The JGroups protocol stack should be setup according to the reliability afforded by the features on your network.
				Refer to the JGroups protocol documentation (http://www.jgroups.org/javagroupsnew/docs/user/node134.html) for more specifics.
			</answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>About HA-JDBC</title>
		<faq>
			<question>How does HA-JDBC compare to the <a href="http://c-jdbc.objectweb.org">C-JDBC</a> project?</question>
			<answer>
				<table>
					<caption>Feature comparison</caption>
					<tr>
						<th></th>
						<th>C-JDBC</th>
						<th>HA-JDBC</th>
					</tr>
					<tr>
						<th>Architecture</th>
						<td>
							<ol>
								<li>C-JDBC driver access underlying JDBC drivers via remote controller process.</li>
								<li>Cluster details are stored in controller.</li>
								<li>Controller uses transaction recovery log to restore intra-transactional state of a reactivated database.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>HA-JDBC driver accesses underlying JDBC drivers directly.</li>
								<li>Cluster details are stored in distributed cache on client.</li>
								<li>Driver records operation list to restore state of SQL objects for reactivated databases.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Cluster administration</th>
						<td>
							<ol>
								<li>Provides JMX-based Administration Console GUI</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Uses JMX management console provided by 3rd party JMX provider.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Provides connection pooling</th>
						<td>
							<p>Yes - implemented in controller</p>
						</td>
						<td>
							<p>
								No - several open source solutions already exist and can be used in conjunction with HA-JDBC:
							</p>
							<ul>
								<li><a href="http://jakarta.apache.org/commons/dbcp">Commons DBCP</a></li>
								<li><a href="http://xapool.objectweb.org/">XAPool</a></li>
								<li><a href="http://proxool.sourceforge.net/">Proxool</a></li>
								<li><a href="http://c3p0.sourceforge.net/">c3p0</a></li>
							</ul>
						</td>
					</tr>
					<tr>
						<th>ResultSet caching ability</th>
						<td>
							<p>Yes - implemented in controller</p>
						</td>
						<td>
							<p>
								No - several open source solutions already exist and can be used in conjunction with HA-JDBC:
							</p>
							<ul>
								<li><a href="http://www.irongrid.com/catalog/product_info.php?products_id=31">IronEye Cache</a></li>
							</ul>
						</td>
					</tr>
					<tr>
						<th>Cluster topography</th>
						<td>
							<ol>
								<li>Supports heterogenous database clusters - required that SQL queries be translated to proper SQL dialect.</li>
								<li>Supports RAIDb-0, RAIDb-1, and RAIDb-2 configurations (i.e. mirroring (replication), striping (partitioning), and partial mirroring/striping, respectively).</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Databases within a cluster must be homogenous.</li>
								<li>Supports the equivalent of RAIDb-0 only.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>JDBC 2.0 feature support</th>
						<td>
							<p>
								Lacks support for:
							</p>
							<ul>
								<li>Pre-compilable <code>PreparedStatement</code>s</li>
								<li>Updatable <code>ResultSet</code>s</li>
								<li><code>CallableStatement</code>s with OUT parameters</li>
								<li>True large object support - BLOB and CLOB are simulated with encoded <code>byte[]</code> and <code>String</code>, respectively</li>
								<li>True binary/character stream support - simulated with encoded <code>byte[]</code> and <code>String</code>, respectively</li>
								<li>Array and Ref types</li>
								<li>Custom type mapping</li>
								<li>Block fetched scrollable <code>ResultSet</code>s</li>
								<li><code>Statement</code> execution cancellation</li>
							</ul>
						</td>
						<td>
							<p>Full support</p>
						</td>
					</tr>
					<tr>
						<th>JDBC 3.0 feature support</th>
						<td>
							<p>
								Lacks support for:
							</p>
							<ul>
								<li>Transactional <code>Savepoint</code>s</li>
								<li><code>XADataSource</code> and <code>XAConnection</code></li>
								<li><code>PreparedStatement</code> pooling</li>
								<li>Retrieval of auto-generated keys</li>
								<li><code>ParameterMetaData</code></li>
								<li><code>ResultSet</code> holdability support</li>
								<li>Multiple open <code>ResultSet</code>s</li>
							</ul>
						</td>
						<td>
							<p>Full support</p>
						</td>
					</tr>
				</table>
			</answer>
		</faq>
	</faqsection>
</faqs>
