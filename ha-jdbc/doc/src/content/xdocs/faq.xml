<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE faqs PUBLIC "-//APACHE//DTD FAQ V2.0//EN" "http://xml.apache.org/forrest/dtd/faq-v20.dtd">
<faqs>
	<title>Frequently Asked Questions</title>
	<faqsection>
		<title>Dependency FAQs</title>
		<faq>
			<question>JGroups FAQ</question>
			<answer><a href="http://www.jgroups.org/javagroupsnew/docs/faq.html">http://www.jgroups.org/javagroupsnew/docs/faq.html</a></answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>Configuring HA-JDBC</title>
		<faq>
			<question>How do I configure HA-JDBC to notify me when a database is deactivated?</question>
			<answer>
				Use your logging facility.  HA-JDBC will log database activations and deactivations with ERROR level.
				If you use Log4J, configure an SMTP appender for the "net.sf.hajdbc" logger.<br/>
				If you use java.util.logging, configure an <a href="http://http://smtphandler.sourceforge.net/">SMTPHandler</a> for the "net.sf.hajdbc" package.
			</answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>Using HA-JDBC</title>
		<faq>
			<question>I get a java.lang.OutOfMemoryError when synchronizing a failed cluster node.  Why?</question>
			<answer>
				<p>
					This can occur if your database contains a table with more rows than can be fetched into memory at once.
					Both the differential and full synchronization strategies have a <code>fetchSize</code> property that control the number of rows that are fetched at a time.
				</p>
				<p>e.g.</p>
<source><![CDATA[
<sync id="diff" class="net.sf.hajdbc.sync.DifferentialSynchronizationStrategy">
  <property name="fetchSize">1000</property>
</sync>
]]></source>
				<p>
					The FullSynchronization strategy has an additional <code>maxBatchSize</code> property to control the number of batched insert statements to execute at a time.
				</p>
				<p>e.g.</p>
<source><![CDATA[
<sync id="full" class="net.sf.hajdbc.sync.FullSynchronizationStrategy">
  <property name="fetchSize">1000</property>
  <property name="maxBatchSize">100</property>
</sync>
]]></source>
			</answer>
		</faq>
		<faq>
			<question>How can HA-JDBC be leveraged to improve database-driven HTTP Session failover?</question>
			<answer>
				<p>
					Several session replication methods are described in an <a href="http://www.theserverside.com/articles/article.tss?l=J2EEClustering">article</a> posted to TheServerSide.com.
					Figure 7 illustrates the database persistence approach.
					When describing the disadvantages of this approach, the article fails to mention that the session database is a single point of failure in this design.
					HTTP sessions will survive the failure of an application server node, but failure of the session database spells doom for the application.
				</p>
				<p>
					However, this can easily remedied with redundant session databases using the HA-JDBC driver in distributable mode.
				</p>
				<p>e.g.</p>
				<p>
					For Tomcat, following the configuration instructions for setting up a Persistent Manager using a JDBC store <a href="http://jakarta.apache.org/tomcat/tomcat-5.0-doc/config/manager.html">here</a>.
					Simply use HA-JDBC's driver and url in place or your database's JDBC driver and url for the <code>driverName</code> and <code>connectionURL</code> properties of your store configuration.
				</p>
			</answer>
		</faq>
		<faq>
			<question>Can I use HA-JDBC with Tomcat 5.0?</question>
			<answer>
				Yes, but first you will need to upgrade the JMX implementation used by Tomcat (found in $CATALINA_HOME/bin/jmx.jar).
				Tomcat 5.0 ships with MX4J 1.1.1 which only implements JMX 1.1.
				Because HA-JDBC uses JMX 1.2, you will need to upgrade this file to MX4J 2.0 or greater (3.0.1 recommended).
			</answer>
		</faq>
		<faq>
			<question>HA-JDBC remembers which databases were inactive even after I restart my JVM.  Where is this state recorded and how do I clear it?</question>
			<answer>
				<p>
					HA-JDBC uses the Java preferences API to persist the local database cluster state.
					The default storage mechanism varies depending on your operating system.
				</p>
				<p>On Unix-based systems, the cluster state will be stored on the file system within the user's home directory:</p>
				<p><code>~/.java/.userPrefs/net/sf/hajdbc/local/prefs.xml</code></p>
				<p>On Windows-based systems, the cluster state will be stored in the registry:</p>
				<p><code>HKEY_CURRENT_USER\Software\JavaSoft\Prefs\net\sf\hajdbc\local\</code><em>cluster-name</em></p>
			</answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>About HA-JDBC</title>
		<faq>
			<question>How does HA-JDBC compare to <a href="http://c-jdbc.objectweb.org">C-JDBC</a>, an ObjectWeb project with similiar goals?</question>
			<answer>
				<table>
					<caption>Feature comparison</caption>
					<tr>
						<th></th>
						<th>HA-JDBC 1.x</th>
						<th>C-JDBC 1.x</th>
					</tr>
					<tr>
						<th>Architecture</th>
						<td>
							<ol>
								<li>HA-JDBC driver delegates JDBC methods directly to the underlying drivers.</li>
								<li>Cluster details are stored in distributed cache on client.</li>
								<li>Leverages underlying database for request scheduling.</li>
								<li>High-availability is inherent in design.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>C-JDBC driver interprets JDBC API and delegates parsed SQL queries to remote controller process, which, in turn, delegates query execution to the underlying drivers.</li>
								<li>Cluster details are known only to controller.</li>
								<li>The controller's request scheduler strategy is responsible for serializing execution order.</li>
								<li>High-availability is achieved by setting up failover controller process.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Cluster topography</th>
						<td>
							<ol>
								<li>Databases within a cluster must be homogenous.</li>
								<li>Supports mirroring only.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Supports heterogenous database clusters - requires that SQL queries be translated to appropriate SQL dialect.</li>
								<li>Supports RAIDb-0, RAIDb-1, and RAIDb-2 configurations (i.e. mirroring (replication), striping (partitioning), and partial mirroring/striping, respectively).</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Failed node recovery</th>
						<td>
							<ol>
								<li>No recovery log is maintained.</li>
								<li>Synchronization achieved through various brute force strategies.</li>
								<li>Inefficient hot synchronization capability tolerated at the savings of performance during normal usage.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Controller uses internal database recovery log to restore state of a reactivated database.</li>
								<li>Synchronization is done by executing SQL statements since last checkpoint.</li>
								<li>Efficient hot synchronization capability achieved at the cost of recovery log overhead.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Performance</th>
						<td>
							<p>
								Faster reads under load, slightly slower writes than standard JDBC.  Details <a href="performance.html">here</a>.
							</p>
						</td>
						<td>
							<p>
								Estimates from users place C-JDBC (without ResultSet caching) 4x slower on average than standard JDBC access.
							</p>
						</td>
					</tr>
					<tr>
						<th>Cluster administration</th>
						<td>
							<ol>
								<li>Relies on a JMX management console provided by 3rd party JMX provider.</li>
								<li>Only supports activating databases that were part of the cluster at startup.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Provides easy-to-use JMX-based administration console</li>
								<li>Includes the ability to add new databases to a cluster on the fly.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Provides connection pooling</th>
						<td>
							<p>
								No - several open source solutions already exist and can be used in conjunction with HA-JDBC:
							</p>
							<ul>
								<li><a href="http://c3p0.sourceforge.net">c3p0</a></li>
								<li><a href="http://proxool.sourceforge.net">Proxool</a></li>
								<li><a href="http://jakarta.apache.org/commons/dbcp">Commons DBCP</a></li>
								<li><a href="http://xapool.objectweb.org">XAPool</a></li>
								<li><a href="http://www.primrose.org.uk">Primrose</a></li>
							</ul>
						</td>
						<td>
							<p>Yes - implemented in controller</p>
						</td>
					</tr>
					<tr>
						<th>ResultSet caching ability</th>
						<td>
							<p>
								No - Transparent result set caching is available through <a href="http://www.irongrid.com/catalog/product_info.php?products_id=31">IronEye Cache</a>.
							</p>
						</td>
						<td>
							<p>Yes - implemented in controller</p>
						</td>
					</tr>
					<tr>
						<th>JDBC 2.0 feature support</th>
						<td>
							<p>Full support</p>
						</td>
						<td>
							<p>
								Lacks support for:
							</p>
							<ul>
								<li>Database-compiled <code>PreparedStatement</code>s</li>
								<li><code>CallableStatement</code>s with OUT parameters</li>
								<li>True large object support - BLOB and CLOB are simulated with encoded <code>byte[]</code> and <code>String</code>, respectively</li>
								<li>True binary/character stream support - simulated with encoded <code>byte[]</code> and <code>String</code>, respectively</li>
								<li>Array and Ref types</li>
								<li>Custom type mapping</li>
								<li>Block fetched scrollable <code>ResultSet</code>s</li>
								<li><code>Statement</code> execution cancellation</li>
							</ul>
						</td>
					</tr>
					<tr>
						<th>JDBC 3.0 feature support</th>
						<td>
							<p>Full support</p>
						</td>
						<td>
							<p>
								Lacks support for:
							</p>
							<ul>
								<li>Transactional <code>Savepoint</code>s</li>
								<li><code>XADataSource</code> and <code>XAConnection</code></li>
								<li><code>PreparedStatement</code> pooling</li>
								<li>Retrieval of auto-generated keys</li>
								<li><code>ParameterMetaData</code></li>
								<li><code>ResultSet</code> holdability support</li>
								<li>Queries/Store procedures that return multiple <code>ResultSet</code>s</li>
							</ul>
						</td>
					</tr>
				</table>
			</answer>
		</faq>
	</faqsection>
</faqs>
