<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE faqs PUBLIC "-//APACHE//DTD FAQ V2.0//EN" "http://xml.apache.org/forrest/dtd/faq-v20.dtd">
<faqs>
	<title>Frequently Asked Questions</title>
	<faqsection>
		<title>Configuring HA-JDBC</title>
		<faq>
			<question>What does the "distributable" feature do? and when would I need it?</question>
			<answer>
				By indicated the "distributable" option, you are declaring that your database cluster(s) will be accessed by multiple JVMs (e.g. cluster of application servers).
				HA-JDBC uses reliable multicast communication provided by JGroups to broadcast database activations and deactivations to each JVM.
				If your database cluster is accessed by more than client and the "distributable" option is not specified, you run the risk of databases falling out of sync when a database is re-activated.
			</answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>Using HA-JDBC</title>
		<faq>
			<question>When using the "distributable" feature, I get a <code>ChannelException</code>: "unable to set up the protocol stack".</question>
			<answer>
				The server on which HA-JDBC is running may need additional network features installed.
				Refer to the JGroups <a href="http://www.jgroups.org/javagroupsnew/docs/user/index.html">documentation</a> for more specifics.
			</answer>
		</faq>
	</faqsection>
	<faqsection>
		<title>About HA-JDBC</title>
		<faq>
			<question>How does HA-JDBC compare to <a href="http://c-jdbc.objectweb.org">C-JDBC</a>, an ObjectWeb project with similiar goals?</question>
			<answer>
				<table>
					<caption>Feature comparison</caption>
					<tr>
						<th></th>
						<th>HA-JDBC</th>
						<th>C-JDBC</th>
					</tr>
					<tr>
						<th>Architecture</th>
						<td>
							<ol>
								<li>HA-JDBC driver delegates JDBC methods directly to the underlying drivers.</li>
								<li>Cluster details are stored in distributed cache on client.</li>
								<li>Leverages database locking for </li>
								<li>High-availability is inherent in design.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>C-JDBC driver interprets JDBC API and delegates parsed SQL queries to remote controller process, which, in turn, delegates query execution to the underlying drivers.</li>
								<li>Cluster details are known only to controller.</li>
								<li>The controller's request scheduler strategy is responsible for serializing execution order</li>
								<li>High-availability is achieved by setting up failover controller process.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Cluster topography</th>
						<td>
							<ol>
								<li>Databases within a cluster must be homogenous.</li>
								<li>Supports mirroring only.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Supports heterogenous database clusters - requires that SQL queries be translated to appropriate SQL dialect.</li>
								<li>Supports RAIDb-0, RAIDb-1, and RAIDb-2 configurations (i.e. mirroring (replication), striping (partitioning), and partial mirroring/striping, respectively).</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Failed node recovery</th>
						<td>
							<ol>
								<li>No recovery log is maintained.</li>
								<li>Synchronization achieved through various brute force strategies.</li>
								<li>Inefficient hot synchronization capability tolerated at the savings of performance.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Controller uses internal database recovery log to restore state of a reactivated database.</li>
								<li>Synchronization is done by executing SQL statements since last checkpoint.</li>
								<li>Efficient hot synchronization capability achieved at the cost of recovery log overhead.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Performance</th>
						<td>Faster reads under load, slightly slower writes than standard JDBC.  Details <a href="performance.html">here</a>.</td>
						<td>Estimates from users place C-JDBC (without ResultSet caching) 4x slower on average than standard JDBC access.</td>
					</tr>
					<tr>
						<th>Cluster administration</th>
						<td>
							<ol>
								<li>Relies on a JMX management console provided by 3rd party JMX provider.</li>
								<li>Only supports activating databases that were part of the cluster at startup.</li>
							</ol>
						</td>
						<td>
							<ol>
								<li>Provides easy-to-use JMX-based administration console</li>
								<li>Includes the ability to add new databases to a cluster on the fly.</li>
							</ol>
						</td>
					</tr>
					<tr>
						<th>Provides connection pooling</th>
						<td>
							<p>
								No - several open source solutions already exist and can be used in conjunction with HA-JDBC:
							</p>
							<ul>
								<li><a href="http://jakarta.apache.org/commons/dbcp">Commons DBCP</a></li>
								<li><a href="http://c3p0.sourceforge.net/">c3p0</a></li>
								<li><a href="http://proxool.sourceforge.net/">Proxool</a></li>
								<li><a href="http://xapool.objectweb.org/">XAPool</a></li>
							</ul>
						</td>
						<td>
							<p>Yes - implemented in controller</p>
						</td>
					</tr>
					<tr>
						<th>ResultSet caching ability</th>
						<td>
							<p>
								No - several open source solutions already exist and can be used in conjunction with HA-JDBC:
							</p>
							<ul>
								<li><a href="http://www.irongrid.com/catalog/product_info.php?products_id=31">IronEye Cache</a></li>
								<li>PhDataCache <em>(no longer in existence)</em></li>
							</ul>
						</td>
						<td>
							<p>Yes - implemented in controller</p>
						</td>
					</tr>
					<tr>
						<th>JDBC 2.0 feature support</th>
						<td>
							<p>Full support</p>
						</td>
						<td>
							<p>
								Lacks support for:
							</p>
							<ul>
								<li>Database-compiled <code>PreparedStatement</code>s</li>
								<li><code>CallableStatement</code>s with OUT parameters</li>
								<li>True large object support - BLOB and CLOB are simulated with encoded <code>byte[]</code> and <code>String</code>, respectively</li>
								<li>True binary/character stream support - simulated with encoded <code>byte[]</code> and <code>String</code>, respectively</li>
								<li>Array and Ref types</li>
								<li>Custom type mapping</li>
								<li>Block fetched scrollable <code>ResultSet</code>s</li>
								<li><code>Statement</code> execution cancellation</li>
							</ul>
						</td>
					</tr>
					<tr>
						<th>JDBC 3.0 feature support</th>
						<td>
							<p>Full support</p>
						</td>
						<td>
							<p>
								Lacks support for:
							</p>
							<ul>
								<li>Transactional <code>Savepoint</code>s</li>
								<li><code>XADataSource</code> and <code>XAConnection</code></li>
								<li><code>PreparedStatement</code> pooling</li>
								<li>Retrieval of auto-generated keys</li>
								<li><code>ParameterMetaData</code></li>
								<li><code>ResultSet</code> holdability support</li>
								<li>Multiple open <code>ResultSet</code>s</li>
							</ul>
						</td>
					</tr>
				</table>
			</answer>
		</faq>
	</faqsection>
</faqs>
